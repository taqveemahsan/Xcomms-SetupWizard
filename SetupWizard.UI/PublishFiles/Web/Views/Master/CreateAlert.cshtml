@model XCommsWeb.Models.AlertModel
@using System.Linq;
@using XCommsWeb.Models;

@{
    ViewBag.Title = "Create Alert";
    Layout = "~/Views/Shared/_Layout.cshtml";

    if (Model.OnceStartDateTime == DateTime.MinValue || Model.OnceStartDateTime == null)
    {
        Model.OnceStartDateTime = DateTime.Now;
    }

    if (Model.OnceEndDateTime == DateTime.MinValue || Model.OnceEndDateTime == null)
    {
        Model.OnceEndDateTime = DateTime.Now;
    }
    if (Model.StartDateComman == DateTime.MinValue || Model.StartDateComman == null)
    {
        Model.StartDateComman = DateTime.Now;
    }
    if (Model.AlertId == 0)
    {
        Model.MonthVal = "1";
        Model.WeeklyMonthVal = "1";
    }

    Model.EndCommanBy = Model.StartDateComman.AddMonths(1);

    //var Text = "Submit"; var type = "Create";
    //if (Model.EditFlag == "Y")
    //{
    //    Text = "Update";
    //    type = "Edit";
    //}
    XCommsWeb.MasterService MS = new XCommsWeb.MasterService();

    int BaseTenantId = ViewBag.BaseTenantId;
    List<CYGNUS_Master_General> GeneralMasterObject = MS.GetGeneralMasterObject(0, BaseTenantId);
    List<CYGNUS_Master_General> ListLifeTimeType = GeneralMasterObject.Where(c => c.CodeType.ToUpper() == "LIFETIMETYPE").OrderBy(c => c.EntryDate).ToList();
    List<CYGNUS_Master_General> ListScheduleDaily = GeneralMasterObject.Where(c => c.CodeType.ToUpper() == "SCHEDULEDAILY").OrderBy(c => c.EntryDate).ToList();
    List<CYGNUS_Master_General> ListMonthDay = GeneralMasterObject.Where(c => c.CodeType.ToUpper() == "MONTHDAY").OrderBy(c => c.EntryDate).ToList();
    List<CYGNUS_Master_General> ListWeekinMontly = GeneralMasterObject.Where(c => c.CodeType.ToUpper() == "WEEKINMONTLY").OrderBy(c => c.EntryDate).ToList();
    List<CYGNUS_Master_General> ListWeekDay = GeneralMasterObject.Where(c => c.CodeType.ToUpper() == "WEEKDAY").OrderBy(c => c.EntryDate).ToList();
    List<CYGNUS_Master_General> ListYearlMonth = GeneralMasterObject.Where(c => c.CodeType.ToUpper() == "YEARLMONTH").OrderBy(c => c.EntryDate).ToList();

    List<SelectListItem> BlankList = new List<SelectListItem>();
}

<style type="text/css">
    .note-editable {
        font-size: 14px !important;
    }

    .checkbox input[type=checkbox], .checkbox-inline input[type=checkbox], .radio input[type=radio], .radio-inline input[type=radio] {
        position: absolute;
        /*margin-left: 0px !important;*/
    }

    .table > tbody > tr > td, .table > tbody > tr > th, .table > tfoot > tr > td, .table > tfoot > tr > th, .table > thead > tr > td, .table > thead > tr > th {
        padding: 8px 32px !important;
    }

    .mrgtp10 {
        margin-top: 10px;
    }

    .form-control-unique {
        display: block;
        width: 100%;
        height: 21px;
        padding: 0px 5px;
        font-size: 13px;
        line-height: 1.42857143;
        color: #555;
        background-color: #fff;
        border: 1px solid #ccc;
    }

    .lable-unique {
        font-size: 14px;
        margin-bottom: 16px;
        margin-left: 10px;
        color: #fff;
    }

    .smart-accordion-default .panel-default > .panel-heading {
        background-color: #3c3a39;
        color: #FFF;
        margin-bottom: 5px;
    }

    .smart-accordion-default.panel-group .panel-title a {
        font-weight: 700;
        padding: 5px 10px;
    }

    .smart-accordion-default.panel-group .panel + .panel {
        margin-top: 5px;
    }

    .smart-accordion-default .panel-default {
        border-color: #c3c3c300;
    }

    .txt-color-yellow {
        color: #ffb848 !important;
    }

    .note-editable > ol {
        margin-top: 0 !important;
        margin-bottom: 9px !important;
        padding-left: 40px !important;
    }

    .note-editor.note-frame {
        border: 1px solid #a9a9a9 !important;
    }

    .smart-form .checkbox, .smart-form .radio {
        margin-bottom: 4px;
        padding-left: 25px;
        line-height: 25px;
        color: #a1a1a1;
        cursor: pointer;
        font-size: 13px;
        padding-top: 0px;
    }

    .img-list {
        width: 19%;
        margin-bottom: 1.2rem;
        display: inline-block;
        cursor: pointer;
    }

        .img-list.selected {
            border: none;
            /*box-shadow: 0px 0px 6px 7px #2b2b2b;*/
            box-shadow: 0px 12px 22px 1px #333;
            z-index: 1;
            /*transform: scale(1.2);*/
            margin: 0 10px 0 10px;
        }

        .img-list > img {
            width: 100%
        }

    .popover.bottom > .arrow:after {
        border-bottom-color: #000;
    }

    .ifAlertPreview {
        position: absolute !important;
        /* top: 0px !important;
            left: 350px !important;*/
        z-index: 99999 !important;
        border: 1px solid #CCC !important;
        border-radius: 10px !important;
    }

    .chatGPTTextBoxDiv {
        float: left;
        width: 100%;
        height: auto;
    }



    .chatGPTTextBox {
        min-height: 110px;
        float: left;
        width: 100%;
        border-radius: 5px !important;
        vertical-align: top;
        resize: none;
    }

    .chatGPTTextBoxResponse {
        min-height: 110px;
        float: left;
        width: 100%;
        border-radius: 5px !important;
        vertical-align: top;
        resize: none;
    }

    .rcornersbuttongreen {
        border-radius: 2px;
        color: black;
        width: 100%;
        height: 35px;
        margin: 3px;
    }

        .rcornersbuttongreen:hover {
            background: #0f9f59;
            color: white;
        }

    .rcornersbuttongray {
        border-radius: 2px;
        color: black;
        width: 100%;
        height: 35px;
        margin: 3px;
    }

        .rcornersbuttongray:hover {
            background: #0f9f59;
            color: white;
        }

    .transparentbutton {
        background-color: transparent;
        color: white;
        margin-top: 20px;
        padding: 0px;
    }

    .clipboardbutton {
        background-color: transparent;
        color: white;
        margin: 3px;
        padding: 0px;
    }

    .icon-btn > i {
        font-size: 18px;
    }

    .icon-btn {
        height: 60px;
        padding: 12px 0px 0px 0px;
        min-width: 80px;
    }

        .icon-btn > i {
            font-size: 18px;
        }

    .hasbgcolor {
        color: red;
    }

    button[disabled] {
        background-color: #CCC;
    }
</style>

<div class="row">
    <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable">
        <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-deletebutton="false" data-widget-togglebutton="false" data-widget-fullscreenbutton="false">
            <header role="heading">
                <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                <h2>New Pop Up Alert</h2>
            </header>
            <div>
                <div class="widget-body">
                    @using (Html.BeginForm("AlertSubmit", "Master", FormMethod.Post, new { id = "contact-form", @class = "form-horizontal", enctype = "multipart/form-data" }))
                    {
                        <div class="pull-right">
                            <ul class="demo-btns">
                                <li>
                                    <a href="javascript:void(0);" class="showAlertPreview btn btn-labeled btn-primary" rel="tooltip" title="" data-placement="bottom" data-original-title="Alert Preview">
                                        <span class="btn-label"><i class="fa fa-eye"></i></span>Preview
                                    </a>
                                </li>
                                <li>
                                    <a href="javascript:void(0);" id="btnSubmit" class="btnSubmitAlt btn btn-labeled btn-warning" rel="tooltip" title="" data-placement="bottom" data-original-title="Save In Draft">
                                        <span class="btn-label"><i class="fa fa-save"></i></span>Draft
                                    </a>
                                </li>
                                <li>
                                    <a href="javascript:void(0);" id="btnSaveNext" class="btnSaveNextAlt btn btn-labeled btn-success" rel="tooltip" title="" data-placement="bottom" data-original-title="Go To Next">
                                        <span class="btn-label"><i class="fa fa-arrow-right"></i></span>Next
                                    </a>
                                </li>
                            </ul>
                        </div>
                        <div class="clearfix"></div>
                        <br />
                        <fieldset>
                            <article class="col-sm-6 col-md-6 col-lg-6 sortable-grid ui-sortable">
                                <fieldset>
                                    <div class="form-group">
                                        <section class="col-md-12 smart-form">
                                            <label class="label"><b>Select Theme : </b></label>
                                            <div class="widget-body no-padding">
                                                <div class="img-list" data-themename="card-header theme-one" id="theme-one">
                                                    <img src="~/assets/img/PopUpUI/01.jpg" data-toggle="popover-hover" data-img="./../assets/img/PopUpUI/01.jpg">
                                                </div>
                                                <div class="img-list" data-themename="card-header theme-two" id="theme-two">
                                                    <img src="~/assets/img/PopUpUI/02.jpg" data-toggle="popover-hover" data-img="./../assets/img/PopUpUI/02.jpg">
                                                </div>
                                                <div class="img-list" data-themename="card-header theme-three" id="theme-three">
                                                    <img src="~/assets/img/PopUpUI/03.jpg" data-toggle="popover-hover" data-img="./../assets/img/PopUpUI/03.jpg">
                                                </div>
                                                <div class="img-list" data-themename="card-header theme-four" id="theme-four">
                                                    <img src="~/assets/img/PopUpUI/04.jpg" data-toggle="popover-hover" data-img="./../assets/img/PopUpUI/04.jpg">
                                                </div>
                                                <div class="img-list" data-themename="card-header theme-five" id="theme-five">
                                                    <img src="~/assets/img/PopUpUI/05.jpg" data-toggle="popover-hover" data-img="./../assets/img/PopUpUI/05.jpg">
                                                </div>
                                                <div class="img-list" data-themename="card-header theme-six" id="theme-six">
                                                    <img src="~/assets/img/PopUpUI/06.jpg" data-toggle="popover-hover" data-img="./../assets/img/PopUpUI/06.jpg">
                                                </div>
                                                <div class="img-list" data-themename="card-header theme-seven" id="theme-seven">
                                                    <img src="~/assets/img/PopUpUI/07.jpg" data-toggle="popover-hover" data-img="./../assets/img/PopUpUI/07.jpg">
                                                </div>
                                                <div class="img-list" data-themename="card-header theme-eight" id="theme-eight">
                                                    <img src="~/assets/img/PopUpUI/08.jpg" data-toggle="popover-hover" data-img="./../assets/img/PopUpUI/08.jpg">
                                                </div>
                                                <div class="superbox ">
                                                    @Html.HiddenFor(m => m.ThemeId)
                                                </div>
                                            </div>
                                        </section>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-12">
                                            <label><b>Optional Message Templates : </b></label>
                                            @Html.DropDownListFor(model => model.TemplateId, new SelectList(BlankList, "Value", "Text", Model.TemplateId), new { @class = "select2", placeholder = "Select " + @Html.DisplayNameFor(c => c.TemplateId), @style = "width:100%" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-12">
                                            <label><b>Alert Subject <span class="hasbgcolor">*</span> : </b></label>   <label id="AlertT" style="color:red;display:none"><b>This Field Is Required</b></label>
                                            <div class="widget-body no-padding">
                                                @Html.TextBoxFor(c => c.AlertTital, new { @class = "form-control" })

                                                @Html.HiddenFor(m => m.AlertId)
                                                @Html.HiddenFor(m => m.EditFlag)
                                                @Html.HiddenFor(m => m.SaveAndNext)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-12">
                                            <label><b>Message Body <span class="hasbgcolor">*</span> : </b></label>   <label id="AlertB" style="color:red;display:none"><b>This Field Is Required</b></label>
                                            <div class="widget-body no-padding">
                                                @Html.TextBoxFor(c => c.AlertBody, new { @class = "form-control alerttitletextbox" })

                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                            </article>

                            <article class="col-sm-6 col-md-6 col-lg-6 sortable-grid ui-sortable">
                                <div>
                                    <div class="widget-body no-padding ">
                                        <div class="panel-group smart-accordion-default" id="accordion-2">
                                            <div class="panel panel-default">
                                                <div class="panel-heading">
                                                    <h4 class="panel-title">
                                                        <a data-toggle="collapse" data-parent="#accordion-2" href="#collapse1" class="" aria-expanded="true">
                                                            <i class="fa fa-fw fa-2x fa-angle-double-down txt-color-yellow" style="vertical-align: sub;"></i>
                                                            <i class="fa fa-fw fa-2x fa-angle-double-up txt-color-yellow" style="vertical-align: sub;"></i> Optional Display Setting
                                                        </a>
                                                    </h4>
                                                </div>
                                                <div id="collapse1" class="panel-collapse collapse" aria-expanded="true" style="">
                                                    <div class="panel-body" style="border-radius: 10px;">
                                                        <fieldset>
                                                            <section class="col-md-6" rel="popover-hover" data-placement="left" data-original-title="Screen Display Position" data-content="To change the alert’s position on the recipient’s screen check the option for the screen position of your choice.">
                                                                <label class="lable-unique">Screen Display Position</label>
                                                                <div class="row smart-form">
                                                                    <div class="col-md-6">
                                                                        <label class="radio">
                                                                            <input type="radio" name="radioPosition" id="TopLeft" value="1" class="radiobox" />
                                                                            <i></i>Top Left
                                                                        </label>
                                                                        <label class="radio">
                                                                            <input type="radio" name="radioPosition" id="TopRight" value="2" class="radiobox" />
                                                                            <i></i>Top Right
                                                                        </label>
                                                                        <label class="radio">
                                                                            <input type="radio" name="radioPosition" id="Center" value="3" class="radiobox" />
                                                                            <i></i>Center
                                                                        </label>
                                                                        <label class="radio">
                                                                            <input type="radio" name="radioPosition" id="BottomLeft" value="4" class="radiobox" />
                                                                            <i></i>Bottom Left
                                                                        </label>
                                                                        <label class="radio">
                                                                            <input type="radio" name="radioPosition" id="BottomRight" value="5" class="radiobox" />
                                                                            <i></i>Bottom Right
                                                                        </label>
                                                                    </div>
                                                                    <div class="col-md-6">
                                                                        <img src="~/assets/img/Screen/Alerts/5.png" class="img-responsive" id="alertImage" />
                                                                    </div>
                                                                </div>
                                                                @Html.HiddenFor(m => m.AlertPosition)
                                                            </section>
                                                            <section class="col-md-offset-1 col-md-5">
                                                                <label class="lable-unique">Alert Sizing option</label>
                                                                <div class="row smart-form margin-bottom-10" rel="popover-hover" data-placement="left" data-original-title="Full Screen" data-content="Check “Full Screen” box to have your alert fill the entire screen of your recipient.">
                                                                    <label class="col-md-5" style="color:#a1a1a1;">Full Screen</label>
                                                                    <div class="col-md-2">
                                                                        <label class="checkbox">
                                                                            @Html.CheckBoxFor(m => m.FullScreenAlert, new { @class = "AlertSetting checkbox " })
                                                                            <i></i>
                                                                        </label>
                                                                    </div>
                                                                </div>
                                                                @*<div class="row smart-form margin-bottom-10" rel="popover-hover" data-placement="left" data-original-title="Resize" data-content="Check the “Resize” box to allow the end user to resize alert windows when they are delivered.">
                                                                        <label class="col-md-5" style="color:#a1a1a1;">Resize</label>
                                                                        <div class="col-md-2">
                                                                            <label class="checkbox">
                                                                                @Html.CheckBoxFor(m => m.isResize, new { @class = "AlertSetting checkbox " })
                                                                                <i></i>
                                                                            </label>
                                                                        </div>
                                                                    </div>*@
                                                                <div class="row smart-form margin-bottom-10" rel="popover-hover" data-placement="left" data-original-title="Alert Width" data-content="You can also adjust the width and height of the alert window manually by entering in your desired width and height.">
                                                                    <label class="col-md-5" style="color:#a1a1a1;">Alert Width</label>
                                                                    <div class="form-inline">
                                                                        @Html.TextBoxFor(c => c.DesktopSizeWidth, new { @class = "form-control input-xs", @min = "10", style = "width: 45px; ", @onkeypress = "javascript:return validFloat(event,this.getAttribute('id'))" })
                                                                        <i style="color:#a1a1a1;">pixels</i>
                                                                    </div>
                                                                </div>
                                                                <div class="row smart-form margin-bottom-10" rel="popover-hover" data-placement="left" data-original-title="Alert Height" data-content="You can also adjust the width and height of the alert window manually by entering in your desired width and height.">
                                                                    <label class="col-md-5" style="color:#a1a1a1;">Alert Height</label>
                                                                    <div class="form-inline">
                                                                        @Html.TextBoxFor(c => c.DesktopSizeHeight, new { @class = "form-control input-xs", @min = "10", style = "width: 45px; ", @onkeypress = "javascript:return validFloat(event,this.getAttribute('id'))" })
                                                                        <i style="color:#a1a1a1;">pixels</i>
                                                                    </div>
                                                                </div>
                                                            </section>
                                                        </fieldset>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="panel panel-default">
                                                <div class="panel-heading">
                                                    <h4 class="panel-title">
                                                        <a data-toggle="collapse" data-parent="#accordion-2" href="#collapse2" aria-expanded="true" class="">
                                                            <i class="fa fa-fw fa-2x fa-angle-double-down txt-color-yellow" style="vertical-align: sub;"></i>
                                                            <i class="fa fa-fw fa-2x fa-angle-double-up txt-color-yellow" style="vertical-align: sub;"></i>  Optional Delivery Setting
                                                        </a>
                                                    </h4>
                                                </div>
                                                <div id="collapse2" class="panel-collapse collapse" aria-expanded="true">
                                                    <div class="panel-body" style="border-radius: 10px;">
                                                        <div class="col-md-9">
                                                            @*<div class="form-inline">
                                                                    <fieldset>
                                                                        <div class="">
                                                                            @Html.CheckBoxFor(m => m.CriticalAlert, new { @class = "AlertSetting" })
                                                                            Critical Alert (Will Display Over Windows Locked Screens)
                                                                        </div>
                                                                    </fieldset>
                                                                </div>*@
                                                            <div class="form-inline mrgtp10">
                                                                <fieldset role="menu" rel="popover-hover" data-placement="left" data-original-title="Expires in" data-content="To determine when an alert should expire and no longer be delivered check the box labeled “Expires in” and select your desired expiration time.">
                                                                    <div class="">
                                                                        @Html.CheckBoxFor(m => m.ExpiresIn, new { @class = "AlertSetting" })
                                                                        Expires in
                                                                        @Html.TextBoxFor(c => c.ExpiresTimeValue, new { @class = "form-control input-xs ", style = "width: 50px; ", @onkeypress = "javascript:return validFloat(event,this.getAttribute('id'))" })
                                                                        @Html.DropDownListFor(m => m.ExpiresTimeType, new SelectList(ListLifeTimeType, "CodeId", "CodeDesc", Model.ExpiresTimeType), new { @class = "form-control input-xs" })
                                                                        No Delivery Attempts After Expiration.
                                                                    </div>
                                                                </fieldset>
                                                            </div>
                                                            <div class="form-inline mrgtp10">
                                                                <fieldset role="menu" rel="popover-hover" data-placement="left" data-original-title="Automatically Close After" data-content="To have an alert close automatically, check the box labeled “Automatically Close After” and type the desired number of minutes you will like the alert to stay on screen for.">
                                                                    <div class="">
                                                                        @Html.CheckBoxFor(m => m.AutoCloseIn, new { @class = "AlertSetting" })
                                                                        Automatically Close Alert After
                                                                        @Html.TextBoxFor(c => c.AutoCloseInMin, new { @class = "form-control input-xs required", @min = "0", style = "width: 50px; ", @onkeypress = "javascript:return validFloat(event,this.getAttribute('id'))" })
                                                                        Minute(s)
                                                                        @Html.Hidden("OldAutoCloseInMin", Model.AutoCloseInMin)
                                                                    </div>
                                                                </fieldset>
                                                            </div>
                                                            <div class="form-inline mrgtp10">
                                                                <fieldset role="menu" rel="popover-hover" data-placement="left" data-original-title="Tray Notification" data-content="To send an alert without covering work areas on a screen, check the box labeled “Tray Notification”. This will allow the alert to be delivered, but will only display on screen when their XComms tray icon is clicked.">
                                                                    <div class="">
                                                                        @Html.CheckBoxFor(m => m.TrayNotification, new { @class = "AlertSetting" })
                                                                        Tray Notification (Full Pop Up Will Not Display Unless Tray Icon Message Is Clicked)
                                                                    </div>
                                                                </fieldset>
                                                            </div>
                                                            <div class="form-inline mrgtp10">
                                                                <fieldset role="menu" rel="popover-hover" data-placement="left" data-original-title="Add Alert Receipt Acknowledgement Button" data-content="To add an alert acknowledgement button to your alert, check the box labeled “Add Alert Receipt Acknowledgement Button.” The user will not be able to close the alert without clicking “ok”.">
                                                                    <div class="">
                                                                        @Html.CheckBoxFor(m => m.AcknoledgrButton, new { @class = "AlertSetting" })
                                                                        Add Alert Receipt Acknowledgement Button
                                                                        @if (BaseTenantId == 40 || BaseTenantId == 1 || BaseTenantId == 100)
                                                                        {
                                                                            <text>
                                                                                with text
                                                                            </text>
                                                                            @Html.TextBoxFor(m => m.AcknowledgeButtonText, new { @class = "form-control input-xs", style = "width: 100px;", maxlength = "50" })
                                                                        }
                                                                    </div>
                                                                </fieldset>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="panel panel-default">
                                                <div class="panel-heading">
                                                    <h4 class="panel-title">
                                                        <a data-toggle="collapse" data-parent="#accordion-2" href="#collapse3" class="" aria-expanded="true">
                                                            <i class="fa fa-fw fa-2x fa-angle-double-down txt-color-yellow" style="vertical-align: sub;"></i>
                                                            <i class="fa fa-fw fa-2x fa-angle-double-up txt-color-yellow" style="vertical-align: sub;"></i> Optional Schedule Setting
                                                        </a>
                                                    </h4>
                                                </div>
                                                <div id="collapse3" class="panel-collapse collapse" aria-expanded="true" style="">
                                                    <div class="panel-body" style="border-radius: 10px;">
                                                        <div class="form-group">
                                                            <div class="col-md-12">
                                                                <div class="col-md-5">
                                                                    <div class="form-inline mrgtp10">
                                                                        <label rel="popover-hover" data-placement="left" data-original-title="One Time (Now)" data-content="To send this alert as soon you select your recipients in the second step, check the box labeled “One Time(Now)” ">
                                                                            <input type="radio" name="RadioSchedulePattern" id="Now" value="Now" class="radiobox" />
                                                                            <span>One Time (Now)</span>
                                                                        </label>
                                                                        <label rel="popover-hover" data-placement="left" data-original-title="Delivery Schedule" data-content="To create a delivery schedule, check the box labeled “Set Alert Delivery Schedule” and select your start and last delivery attempt date and time.">
                                                                            <input type="radio" name="RadioSchedulePattern" id="Once" value="Once" class="radiobox" />
                                                                            <span>Set Alert Delivery Schedule</span>
                                                                        </label>
                                                                        @*<label class="row col-md-12" rel="popover-hover" data-placement="left" data-original-title="Daily Delivery" data-content="To set up an alert that will be delivered every day at a specific time, check the box labeled “Daily Delivery”, specify your desired time of day and how long the alert should deliver daily for. You can set this by date range or number of occurrences.">
                                                                                <input type="radio" name="RadioSchedulePattern" id="Daily" value="Daily" class="radiobox" />
                                                                                <span>Daily Delivery</span>
                                                                            </label>*@
                                                                        <label rel="popover-hover" data-placement="left" data-original-title="Specific Day Of Week" data-content="To set up an alert that will be delivered on specific days of the week and at a specific time: (1) check the box labeled “Specific Day Of Week”, (2) specify your desired day(s) of the week and how long the alert should deliver weekly for. Note: You can set this by date range or number of occurrences.">
                                                                            <input type="radio" name="RadioSchedulePattern" id="Weekly" value="Weekly" class="radiobox" />
                                                                            <span>Specific Day Of Week</span>
                                                                        </label>
                                                                        @*<label class="row col-md-12" rel="popover-hover" data-placement="left" data-original-title="Monthly" data-content="To set up an alert that will be delivered monthly and at a specific time, check the box labeled “Monthly”; specify your desired day of the month and how long the alert should deliver monthly for. Note: You can set this by date range or number of occurrences.">
                                                                                <input type="radio" name="RadioSchedulePattern" id="Monthly" value="Monthly" class="radiobox" />
                                                                                <span>Monthly</span>
                                                                            </label>*@
                                                                        @*<label class="row col-md-12">
                                                                                <input type="radio" name="RadioSchedulePattern" id="Yearly" value="Yearly" class="radiobox" />
                                                                                <span>Specific Day Of Year</span>
                                                                            </label>*@
                                                                        @Html.HiddenFor(c => c.SchedulePatternType)
                                                                    </div>
                                                                </div>
                                                                <div class="col-md-7">
                                                                    <div class="clsOnce">
                                                                        <div class="row col-md-12">
                                                                            <div class="form-group">
                                                                                <label class="col-md-4" style="margin-top:5px">Start Date :</label>
                                                                                <div class="col-md-8">
                                                                                    <div class="input-group date form_datetime">
                                                                                        @Html.TextBoxFor(c => c.OnceStartDateTime, String.Format("{0:dd MMM yyyy hh:mm tt}", Model.OnceStartDateTime), new { @class = " form-control timepicker-default required", @readonly = true })
                                                                                        <span class="input-group-btn">
                                                                                            <button class="btn default date-set" type="button"><i class="fa fa-calendar"></i></button>
                                                                                        </span>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class=" row col-md-12">
                                                                            <div class="form-group">
                                                                                <label class="col-md-4" style="margin-top:5px">Last Delivery Attempt :</label>
                                                                                <div class="col-md-8">
                                                                                    <div class="input-group date to_datetime">
                                                                                        @Html.TextBoxFor(c => c.OnceEndDateTime, String.Format("{0:dd MMM yyyy hh:mm tt}", Model.OnceEndDateTime), new { @class = " form-control timepicker-default required", @readonly = true })
                                                                                        <span class="input-group-btn">
                                                                                            <button class="btn default date-set" type="button"><i class="fa fa-calendar"></i></button>
                                                                                        </span>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        @*<div class="col-md-12">
                                                                                <div class="form-group">
                                                                                    <label class="checkbox-inline">
                                                                                        @Html.CheckBoxFor(m => m.IsOnceReminder, new { @class = "ScheduleOpetion", style = "margin-left: -20px !important" }) Enable reminder
                                                                                    </label>
                                                                                </div>
                                                                            </div>
                                                                            <div class="row col-md-12">
                                                                                <div class="form-group">
                                                                                    <div class="col-md-2">
                                                                                        @Html.TextBoxFor(c => c.OnceReminderVal, new { @class = "form-control-unique", @onkeypress = "javascript:return validFloat(event,this.getAttribute('id'))" })
                                                                                    </div>
                                                                                    <label class="col-md-8">minutes before start date/time</label>
                                                                                </div>
                                                                            </div>*@
                                                                    </div>
                                                                    @*<div class="clsDaily">
                                                                            <div class="form-inline">
                                                                                <fieldset>
                                                                                    <div class="form-group">
                                                                                        @Html.DropDownListFor(m => m.DailyPatternVal, new SelectList(ListScheduleDaily, "CodeId", "CodeDesc", Model.DailyPatternVal), new { @class = "form-control input-xs" })
                                                                                        &nbsp;day(s)
                                                                                    </div>
                                                                                </fieldset>
                                                                            </div>
                                                                        </div>*@
                                                                    <div class="row clsWeekly">
                                                                        <div class="form-inline">
                                                                            <fieldset>
                                                                                <div class="col-md-12">
                                                                                    Resend Every Week on next days
                                                                                </div>
                                                                            </fieldset>
                                                                        </div>
                                                                        <div>
                                                                            <div class="col-md-12">
                                                                                <label class="checkbox-inline">
                                                                                    @Html.CheckBoxFor(m => m.WeeklydaySunday, new { @class = "ScheduleOpetion", style = "margin-left: -20px !important" }) Sunday
                                                                                </label>
                                                                                <label class="checkbox-inline">
                                                                                    @Html.CheckBoxFor(m => m.WeeklydayMonday, new { @class = "ScheduleOpetion", style = "margin-left: -20px !important" }) Monday
                                                                                </label>
                                                                                <label class="checkbox-inline">
                                                                                    @Html.CheckBoxFor(m => m.WeeklydayTuesday, new { @class = "ScheduleOpetion", style = "margin-left: -20px !important" }) Tuesday
                                                                                </label>
                                                                                <label class="checkbox-inline">
                                                                                    @Html.CheckBoxFor(m => m.WeeklydayWednesday, new { @class = "ScheduleOpetion", style = "margin-left: -20px !important" }) Wednesday
                                                                                </label>
                                                                                <label class="checkbox-inline">
                                                                                    @Html.CheckBoxFor(m => m.WeeklydayThursday, new { @class = "ScheduleOpetion", style = "margin-left: -20px !important" }) Thursday
                                                                                </label>
                                                                                <label class="checkbox-inline">
                                                                                    @Html.CheckBoxFor(m => m.WeeklydayFriday, new { @class = "ScheduleOpetion", style = "margin-left: -20px !important" }) Friday
                                                                                </label>
                                                                                <label class="checkbox-inline">
                                                                                    @Html.CheckBoxFor(m => m.WeeklydaySaturday, new { @class = "ScheduleOpetion", style = "margin-left: -20px !important" }) Saturday
                                                                                </label>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    @*<div class="row clsMonthly">
                                                                            <div class="form-inline">
                                                                                <fieldset>
                                                                                    <div class="col-md-12">
                                                                                        <input type="radio" class="form-control" name="optionsRadiosMonthly" id="1" value="1" />
                                                                                        Day
                                                                                        @Html.DropDownListFor(m => m.MonthDay, new SelectList(ListMonthDay, "CodeId", "CodeDesc", Model.MonthDay), new { @class = "form-control input-xs" })
                                                                                        of every
                                                                                        @Html.TextBoxFor(c => c.WeeklyMonthVal, new { @class = "form-control input-xs ", style = "width: 50px;height:22px;", @onkeypress = "javascript:return validFloat(event,this.getAttribute('id'))" })
                                                                                        Month(s)
                                                                                    </div>
                                                                                </fieldset>
                                                                            </div>
                                                                            <div class="form-inline">
                                                                                <fieldset>
                                                                                    <div class="col-md-12">
                                                                                        <input type="radio" class="form-control" name="optionsRadiosMonthly" id="2" value="2" />
                                                                                        The
                                                                                        @Html.DropDownListFor(m => m.WeekinMontly, new SelectList(ListWeekinMontly, "CodeId", "CodeDesc", Model.WeekinMontly), new { @class = "form-control input-xs" })
                                                                                        @Html.DropDownListFor(m => m.DayinWeek, new SelectList(ListWeekDay, "CodeId", "CodeDesc", Model.DayinWeek), new { @class = "form-control input-xs" })
                                                                                        of every
                                                                                        @Html.TextBoxFor(c => c.MonthVal, new { @class = "form-control input-xs ", style = "width: 50px;height:22px;", @onkeypress = "javascript:return validFloat(event,this.getAttribute('id'))" })
                                                                                        Month(s)
                                                                                    </div>
                                                                                </fieldset>
                                                                            </div>
                                                                            @Html.HiddenFor(c => c.MonthlyType)
                                                                        </div>*@
                                                                    @*<div class="clsYearly">
                                                                            <div class="form-inline">
                                                                                <fieldset>
                                                                                    <div class="form-group">
                                                                                        <input type="radio" class="form-control" name="optionsRadiosYearly" id="1" value="1" />
                                                                                        on
                                                                                        @Html.DropDownListFor(m => m.YearlyMonthDay, new SelectList(ListMonthDay, "Value", "Text", Model.YearlyMonthDay), new { @class = "form-control input-xs" })
                                                                                        of
                                                                                        @Html.DropDownListFor(m => m.YearlMonth, new SelectList(ListYearlMonth, "Value", "Text", Model.YearlMonth), new { @class = "form-control input-xs" })
                                                                                        @Html.DropDownListFor(m => m.MonthVal, new SelectList(ListScheduleDaily, "Value", "Text", Model.MonthVal), new { @class = "form-control input-xs" })
                                                                                        Year
                                                                                    </div>
                                                                                </fieldset>
                                                                            </div>
                                                                            <div class="form-inline">
                                                                                <fieldset>
                                                                                    <div class="form-group">
                                                                                        <input type="radio" class="form-control" name="optionsRadiosYearly" id="2" value="2" />
                                                                                        on
                                                                                        @Html.DropDownListFor(m => m.DayinWeekYearly, new SelectList(ListWeekDay, "Value", "Text", Model.DayinWeekYearly), new { @class = "form-control input-xs" })
                                                                                        @Html.DropDownListFor(m => m.WeekinMontYearly, new SelectList(ListWeekinMontly, "Value", "Text", Model.WeekinMontYearly), new { @class = "form-control input-xs" })
                                                                                        of
                                                                                        @Html.DropDownListFor(m => m.MonthsYearl, new SelectList(ListYearlMonth, "Value", "Text", Model.MonthsYearl), new { @class = "form-control input-xs" })
                                                                                        Month
                                                                                    </div>
                                                                                </fieldset>
                                                                            </div>
                                                                            @Html.HiddenFor(c => c.YearlyType)
                                                                        </div>*@
                                                                </div>

                                                            </div>
                                                            <div class="form-group clsComman">
                                                                <div class="col-md-12">
                                                                    <div class="col-md-6">
                                                                        <hr />
                                                                        <label class="lable-unique">Start On:</label>
                                                                        <div class="form-group">
                                                                            @*<label class="control-label col-md-3">Start By: </label>*@
                                                                            <div class="col-md-7">
                                                                                <div class="input-group date form_datetime">
                                                                                    @Html.TextBoxFor(c => c.StartDateComman, String.Format("{0:dd MMM yyyy hh:mm tt}", Model.StartDateComman), new { @class = " form-control timepicker-default required", @readonly = true })
                                                                                    <span class="input-group-btn">
                                                                                        <button class="btn default date-set" type="button"><i class="fa fa-calendar"></i></button>
                                                                                    </span>
                                                                                    @Html.HiddenFor(c => c.StartDateComman)
                                                                                </div>
                                                                                @*<div class="input-group date date-picker">
                                                                                        @Html.TextBoxFor(c => c.StartDateComman, String.Format("{0:dd MMM yyyy  hh:mm tt}", Model.StartDateComman), new { @class = " form-control timepicker-default required", @readonly = true })
                                                                                        <span class="input-group-btn">
                                                                                            <button class="btn default date-set" type="button"><i class="fa fa-calendar"></i></button>
                                                                                        </span>
                                                                                        @Html.HiddenFor(c => c.StartDateComman)
                                                                                    </div>*@
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-6">
                                                                        <hr />
                                                                        <label class="lable-unique">Ended By:</label>
                                                                        <div class="form-group">
                                                                            @*<label class="control-label col-md-3">Start By: </label>*@
                                                                            <div class="col-md-7">
                                                                                <div class="input-group date form_datetime">
                                                                                    @Html.TextBoxFor(c => c.EndCommanBy, String.Format("{0:dd MMM yyyy  hh:mm tt}", Model.EndCommanBy), new { @class = " form-control timepicker-default required", @readonly = true })
                                                                                    <span class="input-group-btn">
                                                                                        <button class="btn default date-set" type="button"><i class="fa fa-calendar"></i></button>
                                                                                    </span>
                                                                                    @Html.HiddenFor(c => c.EndCommanBy)
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="panel panel-default">
                                                <div class="panel-heading">
                                                    <h4 class="panel-title">
                                                        <a data-toggle="collapse" data-parent="#accordion-2" href="#collapse4" class="" aria-expanded="true">
                                                            <i class="fa fa-fw fa-2x fa-angle-double-down txt-color-yellow" style="vertical-align: sub;"></i>
                                                            <i class="fa fa-fw fa-2x fa-angle-double-up txt-color-yellow" style="vertical-align: sub;"></i> Other Messaging Options
                                                        </a>
                                                    </h4>
                                                </div>
                                                <div id="collapse4" class="panel-collapse collapse" aria-expanded="true" style="">
                                                    <div class="panel-body" style="border-radius: 10px;">
                                                        <fieldset>
                                                            <div class="col-md-12 form-group">
                                                                <div class="col-md-7">
                                                                    <div class="btn-group" data-toggle="buttons">
                                                                        <label class="btn btn-default icon-btn clssms" rel="popover-hover" data-placement="left" data-original-title="Other Messaging (SMS)" data-content="To have alert text delivered via SMS, will only receive the text portion of your XComms message.">
                                                                            <input type="checkbox" name="RadioMessaging" value="SMS" data-bv-field="RadioMessaging" id="sms">
                                                                            <i class="fa fa-comment"></i>
                                                                            <div>SMS</div>
                                                                        </label>
                                                                        <label class="btn btn-default icon-btn clsLableWhatsapp" rel="popover-hover" data-placement="left" data-original-title="Other Messaging (Whatsapp)" data-content="To have alert text delivered via Whatsapp, will only receive the text portion of your XComms message.">
                                                                            <input type="checkbox" name="RadioMessaging" value="Whatsapp" data-bv-field="RadioMessaging" id="whatsapp">
                                                                            <img src="~/assets/img/Whatsapp.png" class="clsWhatsapp" style="width: 20px" />
                                                                            <div>Whatsapp</div>
                                                                        </label>
                                                                        <label class="btn btn-default icon-btn clsmail" rel="popover-hover" data-placement="left" data-original-title="Other Messaging (E-Mail)" data-content="To have an alert delivered to email boxes, check the desired channel(s).">
                                                                            <input type="checkbox" name="RadioMessaging" value="Mail" data-bv-field="RadioMessaging" id="mail">
                                                                            <i class="fa fa-envelope"></i>
                                                                            <div>E-mail</div>
                                                                        </label>
                                                                        @Html.HiddenFor(c => c.MessagingType)
                                                                    </div>
                                                                </div>
                                                                <div class="col-md-5">
                                                                    <span style="font-size: 12px; color: #a6a6a6 !important;">
                                                                        Other Messaging Options Note : <br />
                                                                        Media files can and will be sent to email recipients. SMS and WhatsApp will only receive the text portion of your XComms message.
                                                                    </span>
                                                                </div>
                                                            </div>
                                                        </fieldset>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="panel panel-default">
                                                <div class="panel-heading">
                                                    <h4 class="panel-title">
                                                        <a data-toggle="collapse" data-parent="#accordion-2" href="#collapse5" class="" aria-expanded="true">
                                                            <i class="fa fa-fw fa-2x fa-angle-double-down txt-color-yellow" style="vertical-align: sub;"></i>
                                                            <i class="fa fa-fw fa-2x fa-angle-double-up txt-color-yellow" style="vertical-align: sub;"></i> Smart Alerts <i class="fa fa-fw fa-.5x fa-lightbulb-o txt-color-grayDark" style="vertical-align: center; text-align:center;"></i>
                                                        </a>
                                                    </h4>
                                                </div>
                                                <div id="collapse5" class="panel-collapse collapse" aria-expanded="true" style="">
                                                    <div class="panel-body" style="border-radius: 10px;">
                                                        <fieldset>
                                                            <div class="row col-md-12">
                                                                <div class="form-group">
                                                                    <div class="col-md-11">
                                                                        <div class="input-group chatGPTTextBoxDiv">
                                                                            @Html.TextAreaFor(c => c.ChatGPTQuery, new { placeholder = "Hey there! Looking for some help writing an alert? You got it! Just ask us here, and XComms Ai will provide you with some excellent suggestions. \r\n \r\nExample: Write an outage alert to employees notifying them about upcoming scheduled maintenance that will temporarily impact access to certain systems and services with these details.......", @class = " form-control required chatGPTTextBox" })
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-1">
                                                                        <span class="input-group-btn" style="float:left;text-align:left; vertical-align:central;">
                                                                            <button class="btn default chatGptQuery transparentbutton" type="button">
                                                                                <i class="fa fa-fw fa-2x fa-paper-plane-o txt-color-white" style="vertical-align: central; text-align:center;"></i>
                                                                            </button>
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <div class="row col-md-12">
                                                                <div class="form-group">
                                                                    <div class="col-md-11">
                                                                        <div class="input-group chatGPTTextBoxDiv">
                                                                            @Html.TextAreaFor(c => c.ChatGPTQuery, new { @class = " form-control required chatGPTTextBoxResponse" })
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="row col-md-12">
                                                                <div class="form-group">
                                                                    <div class="col-md-3">
                                                                        <button class="btn default rcornersbuttongreen usefortitle" type="button">Use for Subject</button>
                                                                    </div>
                                                                    <div class="col-md-3">
                                                                        <button class="btn default rcornersbuttongray useformessage" type="button">Use for Message</button>
                                                                    </div>
                                                                    <div class="col-md-1">
                                                                        <button class="btn default copytoClipboardbutton clipboardbutton" type="button">
                                                                            <i class="fa fa-fw fa-2x fa-clipboard txt-color-grayDark" style="vertical-align: center; text-align:center;"></i>
                                                                        </button>
                                                                    </div>
                                                                    <p>
                                                                        <a href="https://www.xcomms.com/internal-communications-ai-prompts-for-employee-engagement" target="_blank">
                                                                            <img align="right" img src="~/assets/img/Screen/Alerts/xai.png" class="img-responsive" id="alertImage" />
                                                                </div>
                                                            </div>
                                                        </fieldset>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </article>
                        </fieldset>

                        <div class="pull-right">
                            <ul class="demo-btns">
                                <li>
                                    <a href="javascript:void(0);" class="showAlertPreview btn btn-labeled btn-primary" rel="tooltip" title="" data-placement="bottom" data-original-title="Alert Preview">
                                        <span class="btn-label"><i class="fa fa-eye"></i></span>Preview
                                    </a>
                                </li>
                                <li>
                                    <a href="javascript:void(0);" id="btnSubmit" class="btnSubmitAlt btn btn-labeled btn-warning" rel="tooltip" title="" data-placement="bottom" data-original-title="Save In Draft">
                                        <span class="btn-label"><i class="fa fa-save"></i></span>Draft
                                    </a>
                                </li>
                                <li>
                                    <a href="javascript:void(0);" id="btnSaveNext" class="btnSaveNextAlt btn btn-labeled btn-success" rel="tooltip" title="" data-placement="bottom" data-original-title="Go To Next">
                                        <span class="btn-label"><i class="fa fa-arrow-right"></i></span>Next
                                    </a>
                                </li>
                            </ul>
                        </div>
                        <div class="clearfix"></div>
                    }
                </div>
            </div>
        </div>
    </article>
</div>

<div id="divPreview" style="display:none;">
    <iframe id="iframe" class="ifAlertPreview" name="myFrame" frameborder="0" scrolling="no"></iframe>
</div>

<script type="text/javascript">
    var FormComponents = function (DomainName) {

        var FormValidate = function (DomainName) {
            $("#contact-form").validate({
                // Rules for form validation
                rules: {
                },
                // Messages for form validation
                messages: {
                },
                // Do not change code below
                errorPlacement: function (error, element) {
                    error.insertAfter(element.parent());
                }
            });
        }



        var CallSubmitClick = function (DomainName) {
            $(".usefortitle").on("click", function (e) {
                var data = $('.chatGPTTextBoxResponse').val();
                data = data.replace(new RegExp('\r?\n', 'g'), '<br />');
                $("#AlertTital").summernote('code', data);
            });

            $(".useformessage").on("click", function (e) {
                var data = $('.chatGPTTextBoxResponse').val();
                data = data.replace(new RegExp('\r?\n', 'g'), '<br />');
                $("#AlertBody").summernote('code', data);
            });

            $(".copytoClipboardbutton").on("click", function (e) {
                $('.chatGPTTextBoxResponse').select();
                document.execCommand('copy');
            });

           $(".chatGptQuery").on("click", function (e) {
                if ($('.chatGPTTextBox').val() != "") {
                    App.blockUI({ boxed: true });
                    var strUrl = DomainName + "/Master/GetChatGPTResponse?text=" + $('.chatGPTTextBox').val();
                    $.ajax({
                        type: 'GET',
                        url: strUrl,
                        success: function (data) {
                            $('.chatGPTTextBoxResponse').val(data);
                            App.unblockUI();
                        },
                        error: function (jqXHR, exception) {
                            Swal.fire(errorResult(jqXHR, exception), '', 'error');
                            App.unblockUI();
                        }
                    });
                }
            });

            $(".btnSubmitAlt").click(function (e) {


                $("#AlertBody").val($("#AlertBody").summernote('code'));
                $("#AlertTital").val($("#AlertTital").summernote('code'));

                var form = $("#contact-form");
                if (form.valid() == false) {
                    $("#AlertT").hide();
                    $("#AlertB").hide();
                    return false;;
                }
                else if ($("#AlertTital").summernote('isEmpty')) {
                    $("#AlertT").show();
                    $("#AlertB").hide();
                    return false;
                }
                else if ($("#AlertBody").summernote('isEmpty')) {
                    $("#AlertB").show();
                    $("#AlertT").hide();
                    return false;
                }
                else {
                    $("#AlertT").hide();
                    $("#AlertB").hide();
                    App.blockUI({ boxed: true });

                    $.ajax({
                        url: $('#contact-form').attr('action'),
                        cache: false,
                        type: 'POST',
                        data: $('#contact-form').serialize(),
                        success: function (data) {
                            if (data.Status == true) {
                                Swal.fire('PopUp Alert data has been added successfully!', '', 'success');

                                setTimeout(function () {
                                    if (data.SaveAndNext == "Y") {
                                        window.location = DomainName + "/Master/AlertStep2?AlertId=" + "@Model.AlertId";
                                    }
                                    else {
                                        window.location = DomainName + "/Master/DraftAlertPopUpList";
                                    }
                                }, 1500);
                            }
                            else {
                                TosterNotification("error", 'Opration fail..!!' + data.ErrMsg + ' ', "Oppps..!!");
                                App.unblockUI();
                            }
                            App.unblockUI();
                        },
                        error: function (req, status, error) {
                            TosterNotification("error", 'Opration fail..!! There is some issue please try again or Contact your administrator for more detail.', "Oppps..!!");
                            App.unblockUI();
                        }
                    });
                }
            });

            $(".btnSaveNextAlt").on("click", function () {

                $("#SaveAndNext").val("Y");
                $("#AlertBody").val($("#AlertBody").summernote('code'));
                $("#AlertTital").val($("#AlertTital").summernote('code'));
                if ($("#AlertTital").summernote('isEmpty')) {
                    $("#AlertT").show();
                    $("#AlertB").hide();
                    return false;
                    App.unblockUI();
                }
                else if ($("#AlertBody").summernote('isEmpty')) {
                    $("#AlertB").show();
                    $("#AlertT").hide();
                    return false;
                    App.unblockUI();
                }
                else {
                    App.blockUI({ boxed: true });
                    document.forms["contact-form"].submit();
                }

            });
        }

        return {
            init: function (DomainName) {
                FormValidate(DomainName);
                if ('@Model.EditFlag' == "Y") {

                    $('#AlertBody').summernote({
                        height: 250,
                        focus: true,
                        codemirror: { // codemirror options
                            theme: 'journal'
                        },
                        toolbar: [
                            /* ["style", ["style"]],*/
                            ["font", ["fontsize", "bold", "underline", "clear"]],
                            ["fontname", ["fontname"]],
                            ["color", ["color"]],
                            ["para", ["ul", "ol", "paragraph"]],
                            /*['table', ['table']],*/
                            ['insert', ['link', 'picture', 'video']],
                            ['view', ['fullscreen', 'codeview']],
                        ],
                    });
                    $("#AlertBody").summernote('code', '@Html.Raw(@Model.AlertBody)');

                    $('#AlertTital').summernote({
                        height: 50,
                        focus: true,
                        toolbar: [
                            /*["style", ["style"]],*/
                            ["font", ["fontsize", "bold", "underline", "clear"]],
                            ["fontname", ["fontname"]],
                            ["color", ["color"]],
                            ["para", ["ul", "ol", "paragraph"]],
                        ],
                        codemirror: { // codemirror options
                            theme: 'journal'
                        },
                    });
                    $("#AlertTital").summernote('code', '@Html.Raw(@Model.AlertTital)');

                    if ($("#AlertPosition").val() != "") {
                        $("input[name=radioPosition][value=" + $("#AlertPosition").val() + "]").prop('checked', true);
                    }
                    $("#alertImage").attr("src", DomainName + "/assets/img/Screen/Alerts/" + $("#AlertPosition").val() + ".png");
                    if ($("#SchedulePatternType").val() != "") {
                        $("input[name=RadioSchedulePattern][value=" + $("#SchedulePatternType").val() + "]").prop('checked', true);
                    }
                    $("#OnceStartDateTime").val("@Model.OnceStartDateTime.ToString("dd MMM yyyy hh:mm tt")");
                    if ($("#CommanDateType").val() != "") {
                        $("input[name=optionsRadiosComman][value=" + $("#CommanDateType").val() + "]").prop('checked', true);
                    }
                    $("#StartDateComman").val("@Model.StartDateComman.ToString("dd MMM yyyy hh:mm tt")");
                    $("#" + $("#ThemeId").val().replace("card-header ", "").trim()).addClass("selected");
                    if ($("#YearlyType").val() != "") {
                        $("input[name=optionsRadiosYearly][value=" + $("#YearlyType").val() + "]").prop('checked', true);
                    }
                    if ($("#MonthlyType").val() != "") {
                        $("input[name=optionsRadiosMonthly][value=" + $("#MonthlyType").val() + "]").prop('checked', true);
                    }

                    var messagetype = '@Model.MessagingType';
                    var item = messagetype.split(',');
                     for (var itm in item)
                     {
                         if (item[itm] == "Whatsapp")
                         {
                             $('.clsLableWhatsapp').addClass('active');
                             $(".clsWhatsapp").attr('src', DomainName + "/assets/img/Whatsapp-white.png");
                         }
                         else if (item[itm] == "Mail")
                         {

                             $('.clsmail').addClass('active');
                         }
                         else if (item[itm] == "SMS")
                         {
                            $('.clssms').addClass('active');
                         }
                     }
                }
                else {
                    $('#AlertTital').summernote({
                        height: 50,
                        toolbar: [
                           /* ["style", ["style"]],*/
                            ["font", ["fontsize", "bold", "underline", "clear"]],
                            ["fontname", ["fontname"]],
                            ["color", ["color"]],
                            ["para", ["ul", "ol", "paragraph"]],
                        ],
                        codemirror: { // codemirror options
                             theme: 'journal'
                        },
                        placeholder: 'Add New Pop Up Alert Subject ...',
                    });

                    $('#AlertBody').summernote({
                        height: 250,
                        toolbar: [
                            /* ["style", ["style"]],*/
                            ["font", ["fontsize","bold", "underline", "clear"]],
                            ["fontname", ["fontname"]],
                            ["color", ["color"]],
                            ["para", ["ul", "ol", "paragraph"]],
                            /*['table', ['table']],*/
                            ['insert', ['link', 'picture', 'video']],
                            ['view', ['fullscreen', 'codeview']],
                        ],
                        codemirror: { // codemirror options
                             theme: 'journal'
                        },
                        placeholder: 'Add your text, images, hyperlinks, videos, html here...',
                    });
                }

                $('.form_datetime , .to_datetime').datetimepicker({
                     rtl: App.isRTL(),
                    format: "dd M yyyy HH:ii P",
                    showMeridian: true,
                    minuteStep: 3,
                    autoclose: true,
                    pickerPosition: (App.isRTL() ? "bottom-right" : "bottom-left"),
                    startDate: new Date(),
                    todayBtn: true
                });

                $("#OnceStartDateTime").on("change", function () {
                    $(".to_datetime").datetimepicker('remove');
                    $('.to_datetime').datetimepicker({
                         rtl: App.isRTL(),
                        format: "dd M yyyy HH:ii P",
                        showMeridian: true,
                        minuteStep: 3,
                        autoclose: true,
                        pickerPosition: (App.isRTL() ? "bottom-right" : "bottom-left"),
                        startDate: new Date($("#OnceStartDateTime").val()),
                        todayBtn: true
                    });
                    $("#OnceEndDateTime").val($("#OnceStartDateTime").val())
                });

                @*$('.date-picker').datepicker({
                    isRTL: App.isRTL(),
                    format: "dd M yyyy  HH:ii P",
                    autoclose: true,
                    pickerPosition: (App.isRTL() ? "bottom-right" : "bottom-left"),
                    startDate: '@System.DateTime.Now',
                    todayBtn: true
                });*@

                if ('@Model.EditFlag' == "Y") {
                    if ($("#SchedulePatternType").val() == "Once") {
                        $(".clsOnce").show();
                        $(".clsDaily").hide();
                        $(".clsWeekly").hide();
                        $(".clsMonthly").hide();
                        $(".clsYearly").hide();
                        $(".clsComman").hide();
                    }
                    else if ($("#SchedulePatternType").val() == "Daily") {
                        $(".clsOnce").hide();
                        $(".clsDaily").show();
                        $(".clsWeekly").hide();
                        $(".clsMonthly").hide();
                        $(".clsYearly").hide();
                        $(".clsComman").show();
                    }
                    else if ($("#SchedulePatternType").val() == "Weekly") {
                        $(".clsOnce").hide();
                        $(".clsDaily").hide();
                        $(".clsWeekly").show();
                        $(".clsMonthly").hide();
                        $(".clsYearly").hide();
                        $(".clsComman").show();
                    }
                    else if ($("#SchedulePatternType").val() == "Monthly") {
                        $(".clsOnce").hide();
                        $(".clsDaily").hide();
                        $(".clsWeekly").hide();
                        $(".clsMonthly").show();
                        $(".clsYearly").hide();
                        $(".clsComman").show();
                    }
                    else if ($("#SchedulePatternType").val() == "Yearly") {
                        $(".clsOnce").hide();
                        $(".clsDaily").hide();
                        $(".clsWeekly").hide();
                        $(".clsMonthly").hide();
                        $(".clsYearly").show();
                        $(".clsComman").show();
                    }
                    else {
                        $(".clsOnce").hide();
                        $(".clsDaily").hide();
                        $(".clsWeekly").hide();
                        $(".clsMonthly").hide();
                        $(".clsYearly").hide();
                        $(".clsComman").hide();
                    }
                }
                else {
                    $(".clsOnce").hide();
                    $(".clsDaily").hide();
                    $(".clsWeekly").hide();
                    $(".clsMonthly").hide();
                    $(".clsYearly").hide();
                    $(".clsComman").hide();
                    $("#SchedulePatternType").val(0);

                    $("#MessagingType").val(0);

                   // $(".clsWhatsapp").hide();
                }


                $("input[name='RadioSchedulePattern']").click(function () {

                    if (this.value == "Now") {
                        $("#SchedulePatternType").val("Now");
                        $(".clsOnce").hide();
                        $(".clsDaily").hide();
                        $(".clsWeekly").hide();
                        $(".clsMonthly").hide();
                        $(".clsYearly").hide();
                        $(".clsComman").hide();
                    }
                    if (this.value == "Once") {
                        $("#SchedulePatternType").val("Once");
                        $(".clsOnce").show();
                        $(".clsDaily").hide();
                        $(".clsWeekly").hide();
                        $(".clsMonthly").hide();
                        $(".clsYearly").hide();
                        $(".clsComman").hide();
                    }
                    if (this.value == "Daily") {
                        $("#SchedulePatternType").val("Daily");
                        $(".clsOnce").hide();
                        $(".clsDaily").show();
                        $(".clsWeekly").hide();
                        $(".clsMonthly").hide();
                        $(".clsYearly").hide();
                        $(".clsComman").show();

                    }
                    if (this.value == "Weekly") {
                        $("#SchedulePatternType").val("Weekly");
                        $(".clsOnce").hide();
                        $(".clsDaily").hide();
                        $(".clsWeekly").show();
                        $(".clsMonthly").hide();
                        $(".clsYearly").hide();
                        $(".clsComman").show();
                    }
                    if (this.value == "Monthly") {
                        $("#SchedulePatternType").val("Monthly");
                        $(".clsOnce").hide();
                        $(".clsDaily").hide();
                        $(".clsWeekly").hide();
                        $(".clsMonthly").show();
                        $(".clsYearly").hide();
                        $(".clsComman").show();
                    }
                    if (this.value == "Yearly") {
                        $("#SchedulePatternType").val("Yearly");
                        $(".clsOnce").hide();
                        $(".clsDaily").hide();
                        $(".clsWeekly").hide();
                        $(".clsMonthly").hide();
                        $(".clsYearly").show();
                        $(".clsComman").show();
                    }
                });

                $("input[name='RadioMessaging']").change(function () {

                    var valuesArray = $('input[name="RadioMessaging"]:checked').map(function () {
                        return this.value;
                    }).get().join(",");
                    $("#MessagingType").val(valuesArray);
                    if (this.value == "Whatsapp") {
                        var imageName = "Whatsapp.png";
                        if ($(this).is(":checked")) {
                            imageName = "Whatsapp-white.png";
                        }
                        $(this).next(".clsWhatsapp").attr('src', DomainName + "/assets/img/" +  imageName);
                    }

                    if ($(this).val() == "Mail") {
                        if ($(this).is(":checked")) {
                            App.blockUI({ boxed: true });

                            var strUrl = DomainName + "/Home/GetData";
                            var parameters = {};
                            parameters['CustomerID'] = '@ViewBag.CustomerID';
                            $.ajax({
                                async: false,
                                type: 'POST',
                                url: strUrl,
                                dataType: 'json',
                                data: {
                                    Method: 'USP_GetExistSMTPCountByCustomer',
                                    parameters: parameters
                                },
                                success: function (data) {
                                    var ExistCount = data[0]["CNT"];
                                    if (ExistCount == 0) {
                                        Swal.fire({
                                            title: '<i class="fa fa-envelope txt-color-green"></i> SMTP Mail Not Config, <br> Please set first Mail SMTP !',
                                            text: "Can you config Mail SMTP ?",
                                            icon: 'error',
                                            showCancelButton: true,
                                            confirmButtonColor: '#3085d6',
                                            cancelButtonColor: '#d33',
                                            confirmButtonText: 'Yes, Config It !'
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                window.location = DomainName + "/Master/SmtpConfiguration";
                                                App.unblockUI();
                                                return false;
                                            }
                                            else {
                                                $("input[name=RadioMessaging][value=Mail]").prop('checked', false).change();
                                                $('.clsmail').removeClass('active');
                                                App.unblockUI();
                                            }
                                        })
                                        App.unblockUI();
                                    }
                                    App.unblockUI();
                                },
                                error: function (jqXHR, exception) {
                                    TosterNotification("error", errorResult(jqXHR, exception), "Error");
                                    App.unblockUI();
                                }
                            });
                        }
                        else {
                            console.log($(this).is(":checked"));
                            App.unblockUI();
                        }
                    }

                });
                $("input[name='radioPosition']").click(function () {
                    $("#AlertPosition").val(this.value);
                    $("#alertImage").attr("src", DomainName + "/assets/img/Screen/Alerts/" + this.value + ".png");
                });

                $("input[name='optionsRadiosComman']").click(function () {
                    $("#CommanDateType").val(this.value);
                });
                $("input[name='optionsRadiosYearly']").click(function () {
                    $("#YearlyType").val(this.value);
                });
                $("input[name='optionsRadiosMonthly']").click(function () {
                    $("#MonthlyType").val(this.value);
                });


                CallSubmitClick(DomainName);

                var strUrl = DomainName + '/Master/GetTamlpateList';
                FillDropDownfromOther('TemplateId', strUrl, 'Template');
                $("#TemplateId").removeClass("required required2");

                $('#TemplateId').change(function () {
                    var TemplateName, TemplateBody = "";
                    if ($(this).val()) {
                        App.blockUI({ boxed: true });
                        var strUrl = DomainName + '/Master/GetTamlpateDetailFromId/' + $(this).val();
                        $.ajax({
                            url: strUrl,
                            cache: false,
                            data: {},
                            type: 'POST',
                            async: false,
                            success: function (data) {
                                //console.log(data.TemplateBody);
                                if (data.TemplateName != "") {
                                    TemplateName = data.TemplateTitle;
                                    TemplateBody = data.TemplateBody;
                                    App.unblockUI();
                                }
                                else {
                                    TosterNotification("error", 'Opration fail..!!' + data.ErrMsg + ' ', "Oppps..!!");
                                    App.blockUI();
                                }
                            },
                            error: function (req, status, error) {
                                TosterNotification("error", 'Opration fail..!! There is some issue please try again or Contact your administrator for more detail.', "Oppps..!!");
                                App.unblockUI();
                            }
                        });
                    } else {
                        TemplateName = "";
                        TemplateBody = "";
                    }
                    $("#AlertTital").summernote('code', TemplateName);
                    $("#AlertBody").summernote('code', TemplateBody);
                });
                $.widget("ui.dialog", $.extend({}, $.ui.dialog.prototype, {
                    _title: function (title) {
                        if (!this.options.title) {
                            title.html("&#160;");
                        } else {
                            title.html(this.options.title);
                        }
                    }
                }));

               // $('.superbox').SuperBox();

                if ($("#ThemeId").val() == "") {
                    $("#ThemeId").val("card-header theme-one");
                }

                $('.superbox-list').click(function () {
                    $("#ThemeId").val($(this).attr("id"))
                });

                $('.img-list').click(function () {
                    $("#ThemeId").val($(this).data("themename"));
                    $('.img-list').removeClass('selected');
                    $(this).addClass('selected');
                });

                if ("@Model.AlertId" == "0") {
                    //$("#BottomRight").attr("checked", "checked").click();
                    //$("#ExpiresIn").attr("checked", "checked").change();
                    $("input[name=radioPosition][value=" + $("#AlertPosition").val() + "]").prop('checked', true);
                    $("#alertImage").attr("src", DomainName + "/assets/img/Screen/Alerts/" + $("#AlertPosition").val() + ".png");
                    $("#Now").attr("checked", "checked").click();
                    $("#comrbtn1").attr("checked", "checked").click();
                    $("#" + $("#ThemeId").val().replace("card-header ", "").trim()).addClass("selected");
                    //$("#theme-one").addClass("selected");
                }

                $('[data-toggle="popover-hover"]').popover({
                    html: true,
                    trigger: 'hover',
                    placement: 'bottom',
                    content: function () { return '<img src="' + $(this).data('img') + '" />'; }
                });

                // popovers initialization - on click
                $('[data-toggle="popover-click"]').popover({
                    html: true,
                    trigger: 'click',
                    placement: 'bottom',
                    content: function () { return '<img src="' + $(this).data('img') + '" />'; }
                });

                $(".showAlertPreview").click(function () {

                    $("#AlertTital").val($("#AlertTital").summernote('code'));
                    $("#AlertBody").val($("#AlertBody").summernote('code'));
                    $("#ThemeId").val($("#ThemeId").val());
                    $("#DesktopSizeHeight").val();
                    $("#DesktopSizeWidth").val();
                    var AlertPosition = $("#AlertPosition").val();
                    App.blockUI({ boxed: true });
                    $.ajax({
                        url: DomainName + "/Master/AlertPreviewPopup?AlertId=" + @Model.AlertId,
                        cache: false,
                        type: 'POST',
                        data: $('#contact-form').serialize(),
                        success: function (data) {
                            $(".ifAlertPreview").parent('div').attr("style", "display:none;");
                            $("iframe").contents().find("body").html("");
                            $("iframe").contents().find("body").html(data)

                            $(this).attr("target", "myFrame");
                            //$("#divPreview").toggle('show').change();

                            var height = $("#DesktopSizeHeight").val();
                            var width = $("#DesktopSizeWidth").val();
                            var FullScreenAlert = $("#FullScreenAlert").prop("checked");
                            if (FullScreenAlert) {
                                width = $(document).width() - 220;
                                height = $(document).height() - 89;
                            }
                            $('#iframe').attr('height', height + 'px');
                            $('#iframe').attr('width', width + 'px');

                            var wt = "";
                            var ht = "";

                            if (FullScreenAlert) {
                                $(".ifAlertPreview").attr("style", "top:0px;left:0px;");
                            } else {
                                if (AlertPosition == 1) { // Top-Left
                                    $(".ifAlertPreview").attr("style", "top:0px;left:0px;");
                                }
                                if (AlertPosition == 2) { // Top-Right
                                    wt = (document.documentElement.clientWidth - width - 220) + 'px;';
                                    $(".ifAlertPreview").attr("style", "top:0px;left:" + wt);
                                }
                                if (AlertPosition == 3) { // Center
                                    wt = ((document.documentElement.clientWidth - width - 220) / 2) + 'px;';
                                    if ($(document).height() > $(window).height()) {
                                        ht = ((document.documentElement.clientHeight - height - 89) / 2) + 'px;';
                                    }
                                    else {
                                        ht = ((document.documentElement.clientHeight - height - 141) / 2) + 'px;';
                                    }
                                    $(".ifAlertPreview").attr("style", "top:" + ht + "left:" + wt);
                                }
                                if (AlertPosition == 4) { // Bottom-Left
                                    if ($(document).height() > $(window).height()) {
                                        ht = (document.documentElement.clientHeight - height - 89 + window.pageYOffset) + 'px;';
                                    }
                                    else {
                                        ht = (document.documentElement.clientHeight - height - 141) + 'px;';
                                    }
                                    $(".ifAlertPreview").attr("style", "top:" + ht + "left:0px");
                                }
                                if (AlertPosition == 5) { // Bottom-Right
                                    wt = (document.documentElement.clientWidth - width - 220) + 'px;';
                                    if ($(document).height() > $(window).height()) {
                                        ht = (document.documentElement.clientHeight - height - 89 + window.pageYOffset) + 'px;';
                                    }
                                    else {
                                        ht = (document.documentElement.clientHeight - height - 141) + 'px;';
                                    }
                                    $(".ifAlertPreview").attr("style", "top:" + ht + "left:" + wt);
                                }
                            }

                            setTimeout(function () {

                                $(".ifAlertPreview").parent('div').attr("style", "display:none;");
                                $("#divPreview").toggle('show').change();
                                if (AlertPosition == 4 || AlertPosition == 1) {
                                    if ($("#left-panel").width() > 45) {
                                        $(".minifyme").click();
                                    }
                                    $("iframe").contents().find(".close").on("click", function () {
                                        $(".minifyme").click();
                                    });
                                }
                                $(".card-body-div").find("a").attr("target", "_blank");
                            }, 200);

                            $("iframe").contents().find(".close").on("click", function () {
                                $("iframe").contents().html("");
                            });
                            App.unblockUI();
                        },
                        error: function (req, status, error) {
                            TosterNotification("error", 'Operation fail..!! There is some issue please try again or Contact your administrator for more detail.', "Oppps..!!");
                            App.unblockUI();
                        }
                     });

                });

                //$("input[name=RadioMessaging][value=Whatsapp]").prop('checked', true).change();
                  if ('@Model.IsExpired' == 1) {
                      $('button').addClass('disabled');
                      $('.btnSubmitAlt ').hide();
                      $('.btnSaveNextAlt  ').hide();
                }
                $(".link-dialog").find(".checkbox").remove();

                $("#AutoCloseIn").click(function () {
                    if ($('input[name=AutoCloseIn]').is(':checked'))
                    {
                        $(this).prop('checked', true);
                        $(this).val(true);
                        $("#AutoCloseInMin").val($("#OldAutoCloseInMin").val());
                        $("#AutoCloseInMin").attr({ "min": "1" });
                        $("#AutoCloseInMin").addClass("required").change();
                    }
                    else
                    {
                        $(this).prop('checked', false);
                        $(this).val(false);
                        $("#AutoCloseInMin").val("0");
                        $("#AutoCloseInMin").attr({ "min": "0" });
                        $("#AutoCloseInMin").addClass("required").change();
                    }
                });
            }
        }
    }();
</script>