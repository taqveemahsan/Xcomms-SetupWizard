var Datatable = function () {
    var tableOptions; var dataTable; var table; var tableContainer; var tableWrapper; var tableInitialized = false; var ajaxParams = []; var countSelectedRecords = function () { var selected = $('tbody > tr > td:nth-child(1) input[type="checkbox"]:checked', table).size(); var text = tableOptions.dataTable.oLanguage.sGroupActions; if (selected > 0) { $('.table-group-actions > span', tableWrapper).text(text.replace("_TOTAL_", selected)); } else { $('.table-group-actions > span', tableWrapper).text(""); } }
    return {
        init: function (options) {
            if (!$().dataTable) { return; }
            var the = this; options = $.extend(true, {
                src: "", filterApplyAction: "filter", filterCancelAction: "filter_cancel", resetGroupActionInputOnSuccess: true, dataTable: {
                    "sDom": "<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'<'table-group-actions pull-right'>>r><'table-scrollable't><'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>r>>", "aLengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]], "iDisplayLength": 10, "oLanguage": { "sProcessing": '<img src="assets/img/loading-spinner-grey.gif"/><span>&nbsp;&nbsp;Loading...</span>', "sLengthMenu": "<span class='seperator'>|</span>View _MENU_ records", "sInfo": "<span class='seperator'>|</span>Found total _TOTAL_ records", "sInfoEmpty": "No records found to show", "sGroupActions": "_TOTAL_ records selected:  ", "sAjaxRequestGeneralError": "Could not complete request. Please check your internet connection", "sEmptyTable": "No data available in table", "sZeroRecords": "No matching records found", "oPaginate": { "sPrevious": "Prev", "sNext": "Next", "sPage": "Page", "sPageOf": "of" } }, "aoColumnDefs": [{ 'bSortable': false, 'aTargets': [0] }], "bAutoWidth": false, "bSortCellsTop": true, "sPaginationType": "bootstrap_extended", "bProcessing": true, "bServerSide": true, "sAjaxSource": "", "sServerMethod": "POST", "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                        oSettings.jqXHR = $.ajax({
                            "dataType": 'json', "type": "POST", "url": sSource, "data": aoData, "success": function (res, textStatus, jqXHR) {
                                if (res.sMessage) { App.alert({ type: (res.sStatus == 'OK' ? 'success' : 'danger'), icon: (res.sStatus == 'OK' ? 'check' : 'warning'), message: res.sMessage, container: tableWrapper, place: 'prepend' }); }
                                if (res.sStatus) { if (tableOptions.resetGroupActionInputOnSuccess) { $('.table-group-action-input', tableWrapper).val(""); } }
                                if ($('.group-checkable', table).size() === 1) { $('.group-checkable', table).attr("checked", false); $.uniform.update($('.group-checkable', table)); }
                                if (tableOptions.onSuccess) { tableOptions.onSuccess.call(the); }
                                fnCallback(res, textStatus, jqXHR);
                            }, "error": function () {
                                if (tableOptions.onError) { tableOptions.onError.call(the); }
                                App.alert({ type: 'danger', icon: 'warning', message: tableOptions.dataTable.oLanguage.sAjaxRequestGeneralError, container: tableWrapper, place: 'prepend' }); $('.dataTables_processing', tableWrapper).remove();
                            }
                        });
                    }, "fnServerParams": function (aoData) { for (var i in ajaxParams) { var param = ajaxParams[i]; aoData.push({ "name": param.name, "value": param.value }); } }, "fnDrawCallback": function (oSettings) {
                        if (tableInitialized === false) { tableInitialized = true; table.show(); }
                        App.initUniform($('input[type="checkbox"]', table)); countSelectedRecords();
                    }
                }
            }, options); tableOptions = options; table = $(options.src); tableContainer = table.parents(".table-container"); $.fn.dataTableExt.oStdClasses.sWrapper = $.fn.dataTableExt.oStdClasses.sWrapper + " dataTables_extended_wrapper"; dataTable = table.dataTable(options.dataTable); tableWrapper = table.parents('.dataTables_wrapper'); $('.dataTables_length select', tableWrapper).addClass("form-control input-xsmall input-sm"); if ($('.table-actions-wrapper', tableContainer).size() === 1) { $('.table-group-actions', tableWrapper).html($('.table-actions-wrapper', tableContainer).html()); $('.table-actions-wrapper', tableContainer).remove(); }
            $('.group-checkable', table).change(function () { var set = $('tbody > tr > td:nth-child(1) input[type="checkbox"]', table); var checked = $(this).is(":checked"); $(set).each(function () { $(this).attr("checked", checked); }); $.uniform.update(set); countSelectedRecords(); }); table.on('change', 'tbody > tr > td:nth-child(1) input[type="checkbox"]', function () { countSelectedRecords(); }); table.on('click', '.filter-submit', function (e) { e.preventDefault(); the.addAjaxParam("sAction", tableOptions.filterApplyAction); $('textarea.form-filter, select.form-filter, input.form-filter:not([type="radio"],[type="checkbox"])', table).each(function () { the.addAjaxParam($(this).attr("name"), $(this).val()); }); $('input.form-filter[type="checkbox"]:checked, input.form-filter[type="radio"]:checked', table).each(function () { the.addAjaxParam($(this).attr("name"), $(this).val()); }); dataTable.fnDraw(); the.clearAjaxParams(); }); table.on('click', '.filter-cancel', function (e) { e.preventDefault(); $('textarea.form-filter, select.form-filter, input.form-filter', table).each(function () { $(this).val(""); }); $('input.form-filter[type="checkbox"]', table).each(function () { $(this).attr("checked", false); }); the.addAjaxParam("sAction", tableOptions.filterCancelAction); dataTable.fnDraw(); the.clearAjaxParams(); });
        }, getSelectedRowsCount: function () { return $('tbody > tr > td:nth-child(1) input[type="checkbox"]:checked', table).size(); }, getSelectedRows: function () { var rows = []; $('tbody > tr > td:nth-child(1) input[type="checkbox"]:checked', table).each(function () { rows.push({ name: $(this).attr("name"), value: $(this).val() }); }); return rows; }, addAjaxParam: function (name, value) { ajaxParams.push({ "name": name, "value": value }); }, clearAjaxParams: function (name, value) { ajaxParams = []; }, getDataTable: function () { return dataTable; }, getTableWrapper: function () { return tableWrapper; }, gettableContainer: function () { return tableContainer; }, getTable: function () { return table; }
    };
};